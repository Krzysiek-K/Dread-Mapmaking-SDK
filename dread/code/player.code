

actor Player 0 {

	// Receives player damage
	// Emulates player face
	// Receives cheat pulses


	// Object values:
	//
	//	value		- temp
	//


	callback OnCreate {
		player_health		= 100;
		player_bullets_cap	= 200;
		player_shells_cap	=  50;
		player_rockets_cap	=  50;
		player_cells_cap	= 300;
		->IdleFace;
	}

	callback OnDamage {
		if( cheat_flags & 2 )
			damage = 0;

		if( damage > 0 )
		{
			if( player_health > 0 )
			{
				// Half damage on easy
				if( skill == 0 )
					damage = damage >> 1;

				// Armor damage
				value = damage >> 1;					// value  = damage bypassing armor
				damage -= value;						// damage = damage to armor
				if( damage > player_armor )
				{
					value += damage - player_armor;		// excess damage
					player_armor = 0;
				}
				else
					player_armor -= damage;

				if( value > 0 )
				{
					if( value >= (rand()&15) )
						sound $DSPLPAIN;

					player_health -= value;

					// Red glow
					value = value << 2;
					if( value > 40 ) value = 40;
					player_red_glow += value;
					if( player_red_glow < 16 ) player_red_glow = 16;

					// Face
					if( player_health <= 0 )
					{
						sound $DSPLDTH;
						player_health = 0;
						player_face = FACE_STFDEAD0;
						mp_pulse_avatar 13;
					}
					else if( value >= 20 )
						->OuchFace;
					else
						->ShortKillFace;
				}
			}
		}
		damage = 0;
	}

	callback OnPulse {
		if( pulse == 1 )
		{
			->HappyFace;
		}
		else if( pulse == 2 )
		{
			->KillFace;
		}
		else if( pulse == 0x90 )
		{
			// ATFA cheat
			statbar_weapon_1 = GFX_STGNUM3;
			statbar_weapon_2 = GFX_STGNUM4;
			statbar_weapon_3 = GFX_STGNUM5;
			// player_bullets_cap = 400;
			// player_shells_cap = 100;
			// player_rockets_cap = 100;
			// player_cells_cap = 600;
			player_bullets	= player_bullets_cap;
			player_shells	= player_shells_cap;
			player_rockets	= player_rockets_cap;
			player_cells	= player_cells_cap;
			if( player_health < 100 )
				player_health = 100;
			player_pal_flash = 9;
			cheat_flags = cheat_flags | 1;
			->HappyFace;
		}
		else if( pulse == 0x91 )
		{
			// ATKEY cheat
			statbar_key_0 = 1;
			statbar_key_1 = 2;
			statbar_key_2 = 3;
			player_pal_flash = 9;
			cheat_flags = cheat_flags | 1;
		}
		else if( pulse == 0x92 )
		{
			// ATPOW cheat
			player_health	= 200;
			player_armor	= 200;
			player_pal_flash = 9;
			cheat_flags = cheat_flags | 1;
		}
		else if( pulse == 0x93 )
		{
			// ATRWD cheat
			if( player_health < 100 )
				player_health = 100;
			player_pal_flash = 9;
			cheat_flags = (cheat_flags | 1) ^ 2;
			->IdleFace;
		}
		else if( pulse == 0xFF )
		{
			// Linedef ticked

			temp1 = player_sector_type & 0xFF;			// Masked sector type


			if( player_sector_type == SECTOR_TYPE_END_LEVEL )
			{
				game_state = 2;
			}
			else if( player_sector_type == SECTOR_TYPE_FLOOR_DAMAGE_5 )
			{
				if( player_boots_timer <= 0 )
					player_damaged 5;
				player_floor_timer += 300;
			}
			else if( player_sector_type == SECTOR_TYPE_FLOOR_DAMAGE_10 )
			{
				if( player_boots_timer <= 0 )
					player_damaged 10;
				player_floor_timer += 300;
			}
			else if( player_sector_type == SECTOR_TYPE_FLOOR_DAMAGE_20 )
			{
				if( player_boots_timer <= 0 )
					player_damaged 20;
				player_floor_timer += 300;
			}
			else if( temp1 == SECTOR_TYPE_ACTIVATE_TAG )
			{
				switch_flags |= 1 << ((player_sector_type>>8)-1);
			}
			else if( temp1 == SECTOR_TYPE_DEACTIVATE_TAG )
			{
				switch_flags &= 0xFFFF - (1 << ((player_sector_type>>8)-1));
			}
			else if( temp1 == SECTOR_TYPE_PLAYER_TELEPORT )
			{
				sound $DSTELEPORT;
				player_set_location player_sector_type>>8;
			}
			else if( temp1 == SECTOR_TYPE_PLAYER_SILENT_TELEPORT_FORWARD )
			{
				player_apply_location_delta player_sector_type>>8, (player_sector_type>>8)+1;
			}
			else if( temp1 == SECTOR_TYPE_PLAYER_SILENT_TELEPORT_BACK )
			{
				player_apply_location_delta 1+(player_sector_type>>8), player_sector_type>>8;
			}
			else if( player_sector_type >= SECTOR_TYPE_SECRET_1 && player_sector_type <= SECTOR_TYPE_SECRET_9 )
			{
				temp1 = 1 << (player_sector_type - SECTOR_TYPE_SECRET_1);
				if( (levstat_secrets_done & temp1) == 0 )
				{
					levstat_secrets += 1;
					levstat_secrets_done |= temp1;
				}
			}
		}
	}

	func FaceBlood {
		if( player_health <=   0 )
		{
			player_face = FACE_STFDEAD0;
		}
		else if( player_health < 80 )
		{
			player_face += (99-player_health)/20*6;
		}
	}

	state IdleFace {
	
		if( cheat_flags & 2 )
		{
			player_face = FACE_STFGOD0;		delay 1000;
		}
		else if( player_health > 80 )
		{
			player_face = FACE_STFST01;		delay 900;
			player_face = FACE_STFST00;		delay 200;
			player_face = FACE_STFST01;		delay 400;
			player_face = FACE_STFST02;		delay 200;
		}
		else if( player_health > 60 )
		{
			player_face = FACE_STFST11;		delay 700;
			player_face = FACE_STFST12;		delay 200;
			player_face = FACE_STFST10;		delay 200;
			player_face = FACE_STFST11;		delay 500;
			player_face = FACE_STFST10;		delay 200;
			player_face = FACE_STFST11;		delay 300;
			player_face = FACE_STFST12;		delay 200;
		}
		else if( player_health > 40 )
		{
			player_face = FACE_STFST21;		delay 700;
			player_face = FACE_STFST22;		delay 200;
			player_face = FACE_STFST20;		delay 200;
			player_face = FACE_STFST21;		delay 400;
			player_face = FACE_STFST20;		delay 100;
			player_face = FACE_STFST21;		delay 200;
			player_face = FACE_STFST22;		delay 150;
		}
		else if( player_health > 20 )
		{
			player_face = FACE_STFST31;		delay 300;
			player_face = FACE_STFST32;		delay 100;
			player_face = FACE_STFST31;		delay 100;
			player_face = FACE_STFST30;		delay 100;
			player_face = FACE_STFST31;		delay 200;
			player_face = FACE_STFST30;		delay 100;
			player_face = FACE_STFST31;		delay 200;
			player_face = FACE_STFST32;		delay 100;
		}
		else if( player_health > 0 )
		{
			player_face = FACE_STFST41;		delay 300;
			player_face = FACE_STFST42;		delay 300;
			player_face = FACE_STFST41;		delay 100;
			player_face = FACE_STFST42;		delay 100;
		}
		else
		{
			player_face = FACE_STFDEAD0;	delay 100;
		}
	}


	state OuchFace {
		player_face = FACE_STFOUCH0;	FaceBlood;		delay 200;
		->IdleFace;
	}

	state HappyFace {
		player_face = FACE_STFEVL0;		FaceBlood;		delay 900;
		->IdleFace;
	}

	state KillFace {
		player_face = FACE_STFKILL0;	FaceBlood;		delay 350;
		->IdleFace;
	}

	state ShortKillFace {
		player_face = FACE_STFKILL0;	FaceBlood;		delay 150;
		->IdleFace;
	}


	state _Bind_Sounds {
		// These sounds are used outside the scripts and are mentioned here, so the exporter exports them.
		sound $DSAMMO;
		sound $DSSELECT;
		sound $DSLEVEND;
	}

}


actor MP_Avatar 0 {

	callback OnCreate {
		//collision_set 10;
		hitbox_on;
		->Walk;
	}

	callback OnDamage {
		if( damage > 0 )
		{
			mp_player_damage damage;

			if( damage >= 15 )
			{
				damage = 0;
				->Pain;
			}

			damage = 0;
			->ShortPain;
		}
	}

	callback OnPulse {
		if( pulse ==  2 ) ->FirePistol;
		if( pulse ==  3 ) ->FireShotgun;
		if( pulse ==  4 ) ->FireChaingun;
		if( pulse == 13 ) ->Die;
	}

	state Walk {
		frame #M_MSHOT_M1;	delay 48;
		frame #M_MSHOT_M2;	delay 48;
		frame #M_MSHOT_M3;	delay 48;
		frame #M_MSHOT_M4;	delay 48;
	}

	state Pain {
		move_stop;
		sound $DSPOPAIN 256;
		frame #M_MSHOT_H1;	delay 66;
		->Walk;
	}

	state ShortPain {
		sound $DSPOPAIN3 256;
		frame #M_MSHOT_H1;	delay 36;
		->Walk;
	}

	state FirePistol {
		sound $DSPISTOL 256;
		frame #M_MSHOT_F1;	delay 30;
		frame #M_MSHOT_F2;	delay 24;
		->Walk;
	}

	state FireShotgun {
		sound $DSSHOTGN 256;
		frame #M_MSHOT_F1;	delay 60;
		frame #M_MSHOT_F2;	delay 48;
		->Walk;
	}

	state FireChaingun {
		sound $DSPISTOL 256;
		frame #M_MSHOT_F1;	delay 24;
		frame #M_MSHOT_F2;	delay 12;
		->Walk;
	}

	state Die {
		move_stop;
		collision_off;
		hitbox_off;
		sound $DSPLDTH 256;
		//sound $DSPODTH1 256;
		frame #M_MSHOT_D1;	delay 30;
		frame #M_MSHOT_D2;	delay 30;
		frame #M_MSHOT_D3;	delay 30;
		frame #M_MSHOT_D4;	delay 30;
		frame #M_MSHOT_D5;	delay 30;
		->Dead;
	}

	state Dead {
		frame #M_MSHOT_DD;
		delay 5000;
	}
}
